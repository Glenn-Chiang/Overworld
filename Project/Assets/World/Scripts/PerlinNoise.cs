using System;
using UnityEngine;

public static class PerlinNoise
{
    public static float[,] GenerateMap(int width, int height, int seed, float scale, 
        int octaves, float persistence, float lacunarity)
    {
        float[,] noiseMap = new float[width, height];

        // The same seed will always produce the same noise map when provided the same parameters
        var rand = new System.Random(seed);

        // For each octave, a different noise map is generated independent of the noise maps generated by the other octaves
        // The final noise map is formed by combining the noise maps generated by all octaves
        // In order for each octave to generate a different noise map, we give each octave 
        // a random offset that determines which part of the perlin noise map to sample from
        Vector2[] octaveOffsets = new Vector2[octaves];
        for (int i = 0; i < octaves; i++)
        {
            float offsetX = rand.Next(-100000,100000);
            float offsetY = rand.Next(-100000, 100000);
            octaveOffsets[i] = new Vector2(offsetX, offsetY);
        }


        // Clamp to min value to prevent zero division error
        if (scale <= 0)
        {
            scale = 0.0001f;
        }

        float maxNoiseHeight = float.MinValue;
        float minNoiseHeight = float.MaxValue;

        // For each octave, generate a noise map
        // The final noise map is generated by adding the noise maps generated by each octave
        
        float frequency = 1;
        float amplitude = 1;
        
        for (int i = 0; i < octaves; i++)
        {
            // Iterate over cells in map
            for (int y = 0; y < height; y++)
            {
                for (int x = 0; x < width; x++)
                {
                    // Select a position to sample from the perlin noise map
                    // Frequency and scale determines the distance between the points sampled from the noise map
                    // The higher the frequency, the larger the distance between sample points, thus the rougher/more detailed the map
                    // The higher the scale, the smaller the distance between sample points, thus the smoother the map
                    float sampleX = x * frequency / scale + octaveOffsets[i].x;
                    float sampleY = y * frequency / scale + octaveOffsets[i].y;

                    // Get the noise value at the chosen position on the perlin noise map
                    // Normalize the noise value between -1 and 1
                    float noiseValue = Mathf.PerlinNoise(sampleX,sampleY) * 2 - 1;

                    // Add the noise value for this octave to the running sum of noise values from the previous octaves
                    // Amplitude determines how much the noise value generated by the current octave influences the final noise value
                    noiseMap[x, y] += noiseValue * amplitude;

                    // Update max and min noise values
                    maxNoiseHeight = Mathf.Max(maxNoiseHeight, noiseValue);
                    minNoiseHeight = Mathf.Min(minNoiseHeight, noiseValue);
                }
            }

            // With each subsequent octave, frequency increases 
            // This means that subsequent octaves will produce rougher/more detailed noise maps
            frequency *= lacunarity;
            // With each subsequent octave, amplitude decreases (because persistence is between 0 and 1)
            // This means that subsequent octaves will have less impact on the overall noise map
            amplitude *= persistence;

        }

        // Normalize noise heights between min and max noise heights
        for (int y = 0; y < height; y++)
        {
            for (int x = 0; x < width; x++)
            {
                noiseMap[x, y] = Mathf.InverseLerp(minNoiseHeight, maxNoiseHeight, noiseMap[x, y]);
            }
        }

        return noiseMap;
    }
}